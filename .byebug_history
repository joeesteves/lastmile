continue
hoja.row(1)
continue
hoja.row(1)
exit
hoja.row(1)
continue
exit
hoja.row(1)
continue
hoja.row(1)
continue
exit
hoja.row(1)
a.nombre_operarios
a
continue
alfa
continue
alfa
resumen.as_json
resumen
alfa
continue
resumen
"jose, pepe, jorge".gsub /j,(?: \w+$)/, 'hola'
['jose', 'pepe', 'jorge'].join(', ').match 
['jose', 'pepe', 'jorge'].join(')
['jose', 'pepe', 'jorge'].to_sentence
['jose', 'pepe', 'jorge'].methods.grep /to_/
['jose', 'pepe', 'jorge'].
['jose', 'pepe', 'jorge'].methods.grep /hu/
['jose', 'pepe', 'jorge'].humanize
['jose', 'pepe', 'jorge']
[].is_a? Array
resumen.nombre_operarios
resumen.as_json
continue
resumen.as_json
exit
resumen.as_json
resumen
exit
resumen
continue
contine
beta
resumen
continue
alfa
resumen
continue
resumen
exit
continue
obj
exit
continue
obj
exit
Depreciacion.maquina(k)
exit
Depreciacion.maquina(k)
continue
Depreciacion.maquina(k)
exit
Depreciacion.maquina(k)
Depreciacion.maquina(k).to_f
exit
Depreciacion.maquina(k).to_f
Depreciacion.maquina(k)
.sum(:valor).to_f
exit
alfa
continue
resumen
exit
resumen = Resumen.new('alfa', superficie: 20, horas: 100, gastos_varios: 0, gasoil_cantidad:200, gasoil_costo: 400, costo_operarios: 7000, nombre_operarios: ['Jorge Cafrune'])
resumen
exit
resumen
exit
alfa
resumen
alfa
resumen
exit
resumen
resumen+
resumen.as_json
alfa
exit
alfa
exit
Persona.maquina k
continue
exit
Persona.maquina k
exit
Persona.maquina k
exit
resumen.as_json
resumen
alfa
continue
args[:precio_gasoil]
continue
args[:precio_gasoil]
continue
args[:precio_gasoil]
args
exit
rake
hsh[k] = hsh[k] || Resumen.new k
hsh[k] ||= Resumen.new k
Resumen.new k
k
continue
 Reporteador.new('fertilizadoras').generar
continue
exit
hsh
continue
hsh[k].merge!({hola: 32})
continue
hsh[k].merge!({hola: 32})
hsh[k]
exit
hsh
continue
resumen.as_json
beta
exit
alfa.first.as_json == resumen.as_json
alfa.first.as_json
alfa.first
alfa
resumen
continue
exit
rake
alfa
resumen
continue
v[:superficie]
v
c
continue
resumen.as_json
alfa.first.as_json
continue
alfa.first.as_json
alfa.first
alfa.first == resumen
alfa == resumen
alfa == [resumen]
alfa.first.gasoil_costo == resumen.gasoil_costo
alfa.first.gasoil_costo
resumen.gasoil_costo
alfa == [resumen]
alfa == resumen
alfa.as_json
resumen.as_json
continue
resumen.as_json
alfa.as_json
alfa
continue
resumen
exit
Resumen.new('beta', {superficie: 10, horas: 10, gastos_varios: 250, gasoil: {cantidad:0, costo:0}}).as_json
Resumen.new('beta', {superficie: 10, horas: 10, gastos_varios: 250, gasoil: {cantidad:0, costo:0}}).to_json
Resumen.new('beta', {superficie: 10, horas: 10, gastos_varios: 250, gasoil: {cantidad:0, costo:0}}).to_hash
Resumen.new('beta', {superficie: 10, horas: 10, gastos_varios: 250, gasoil: {cantidad:0, costo:0}})
resumen.to_hash
resumen
resumen.to_json
resumen
exit
Estado.last
exit
Estado.last
referencia
reporte
Estado.find_or_create_by(referencia: referencia) { |st| st.valor = 'proceso' }
referencia
reporte
exit
reporte
referencia
Estado.last
Estado.first
exit
Estado.find_or_create_by(referencia: referencia) { |st| st.valor = 'proceso' }
exitEstado.find_or_create_by(referencia: referencia) { |st| st.valor = 'proceso' }
referencia
exit
Rails.root.to_path
Rails.root.to_s
Rails.root
file_path
continue
UploadWorker.jobs.count
exit
UploadWorker.jobs.count
UploadWorker.jobs
UploadWorker
exit
hoja.methods
hoja
hoja.row(i).map{|i| "'"+i+"'" }.push(DateTime.now.to_s,DateTime.now.to_s)
hoja.row(i).map.{|i| "'"+i+"'" }.push(DateTime.now.to_s,DateTime.now.to_s)
hoja.row(i).map.{|i| "'"+i+"'" }.push(DateTime.now.to_s,DateTime.now.to_s).join(', ')
hoja.row(i).push(DateTime.now.to_s,DateTime.now.to_s).join(', ')
)
hoja.row(i).push(DateTime.now.to_s,DateTime.now.to_s).join(', '
hoja.row(i).push(DateTime.now.to_s,DateTime.now.to_s)
exit
reg
continue
exit
reg
continue
hoja.row(i).map{|i| i.to_f }.push(DateTime.now.to_s,DateTime.now.to_s)
hoja.row(i).map{|i| i.to_f }push(DateTime.now.to_s,DateTime.now.to_s)
hoja.row(i).push(DateTime.now.to_s,DateTime.now.to_s)
hoja.row(i).push(DateTime.now.to_s)
DateTime.now.to_s
DateTime.now
DateTime
Datetime
Date
hoja.row(i).push(Date.now.to_s)
hoja.row(i).push(Date.now.to_s,)
hoja.row(i).push(Date.today.to_s,5)
hoja.row(i).push(Date.today.to_s)
hoja.row(i).push(Date.today)
hoja.row(i)
exit
hoja.row(2)
hoja.row(2).join(',')
hoja.row(2)
exit
reg
exit
head = "(" + hoja.row(1).map{ |h| '`'+h.downcase+'`'}.join(', ') + ")"
"(" + hoja.row(1).map{ |h| '`'+h.downcase+'`'}.join(', ') ")"
hoja.row(1).map{ |h| '`'+h.downcase+'`'}.join(', ')
hoja.row(1).map{ |h| `h.downcase`}.join(', ')
hoja.row(1).map{ |h| h.downcase}.join(', ')
hoja.row(1).map{ |h| h.downcase}.joins(', ')
hoja.row(1).map{ |h| h.downcase}.joins(, )
hoja.row(1).map{ |h| h.downcase}.join(, )
hoja.row(1).map{ |h| h.downcase}.to_s
hoja.row(1).map{ |h| h.downcase}
hoja.row(1).map{ |h| h.downcase.to_sym}
