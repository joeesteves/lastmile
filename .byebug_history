exit
rake
hsh[k] = hsh[k] || Resumen.new k
hsh[k] ||= Resumen.new k
Resumen.new k
k
continue
 Reporteador.new('fertilizadoras').generar
continue
exit
hsh
continue
hsh[k].merge!({hola: 32})
continue
hsh[k].merge!({hola: 32})
hsh[k]
exit
hsh
continue
resumen.as_json
beta
exit
alfa.first.as_json == resumen.as_json
alfa.first.as_json
alfa.first
alfa
resumen
continue
exit
rake
alfa
resumen
continue
v[:superficie]
v
c
continue
resumen.as_json
alfa.first.as_json
continue
alfa.first.as_json
alfa.first
alfa.first == resumen
alfa == resumen
alfa == [resumen]
alfa.first.gasoil_costo == resumen.gasoil_costo
alfa.first.gasoil_costo
resumen.gasoil_costo
alfa == [resumen]
alfa == resumen
alfa.as_json
resumen.as_json
continue
resumen.as_json
alfa.as_json
alfa
continue
resumen
exit
Resumen.new('beta', {superficie: 10, horas: 10, gastos_varios: 250, gasoil: {cantidad:0, costo:0}}).as_json
Resumen.new('beta', {superficie: 10, horas: 10, gastos_varios: 250, gasoil: {cantidad:0, costo:0}}).to_json
Resumen.new('beta', {superficie: 10, horas: 10, gastos_varios: 250, gasoil: {cantidad:0, costo:0}}).to_hash
Resumen.new('beta', {superficie: 10, horas: 10, gastos_varios: 250, gasoil: {cantidad:0, costo:0}})
resumen.to_hash
resumen
resumen.to_json
resumen
exit
Estado.last
exit
Estado.last
referencia
reporte
Estado.find_or_create_by(referencia: referencia) { |st| st.valor = 'proceso' }
referencia
reporte
exit
reporte
referencia
Estado.last
Estado.first
exit
Estado.find_or_create_by(referencia: referencia) { |st| st.valor = 'proceso' }
exitEstado.find_or_create_by(referencia: referencia) { |st| st.valor = 'proceso' }
referencia
exit
Rails.root.to_path
Rails.root.to_s
Rails.root
file_path
continue
UploadWorker.jobs.count
exit
UploadWorker.jobs.count
UploadWorker.jobs
UploadWorker
exit
hoja.methods
hoja
hoja.row(i).map{|i| "'"+i+"'" }.push(DateTime.now.to_s,DateTime.now.to_s)
hoja.row(i).map.{|i| "'"+i+"'" }.push(DateTime.now.to_s,DateTime.now.to_s)
hoja.row(i).map.{|i| "'"+i+"'" }.push(DateTime.now.to_s,DateTime.now.to_s).join(', ')
hoja.row(i).push(DateTime.now.to_s,DateTime.now.to_s).join(', ')
)
hoja.row(i).push(DateTime.now.to_s,DateTime.now.to_s).join(', '
hoja.row(i).push(DateTime.now.to_s,DateTime.now.to_s)
exit
reg
continue
exit
reg
continue
hoja.row(i).map{|i| i.to_f }.push(DateTime.now.to_s,DateTime.now.to_s)
hoja.row(i).map{|i| i.to_f }push(DateTime.now.to_s,DateTime.now.to_s)
hoja.row(i).push(DateTime.now.to_s,DateTime.now.to_s)
hoja.row(i).push(DateTime.now.to_s)
DateTime.now.to_s
DateTime.now
DateTime
Datetime
Date
hoja.row(i).push(Date.now.to_s)
hoja.row(i).push(Date.now.to_s,)
hoja.row(i).push(Date.today.to_s,5)
hoja.row(i).push(Date.today.to_s)
hoja.row(i).push(Date.today)
hoja.row(i)
exit
hoja.row(2)
hoja.row(2).join(',')
hoja.row(2)
exit
reg
exit
head = "(" + hoja.row(1).map{ |h| '`'+h.downcase+'`'}.join(', ') + ")"
"(" + hoja.row(1).map{ |h| '`'+h.downcase+'`'}.join(', ') ")"
hoja.row(1).map{ |h| '`'+h.downcase+'`'}.join(', ')
hoja.row(1).map{ |h| `h.downcase`}.join(', ')
hoja.row(1).map{ |h| h.downcase}.join(', ')
hoja.row(1).map{ |h| h.downcase}.joins(', ')
hoja.row(1).map{ |h| h.downcase}.joins(, )
hoja.row(1).map{ |h| h.downcase}.join(, )
hoja.row(1).map{ |h| h.downcase}.to_s
hoja.row(1).map{ |h| h.downcase}
hoja.row(1).map{ |h| h.downcase.to_sym}
header
headers
headerss
exit
hoja.row(2).join('","')
hoja.row(2).join(',')
hoja.row(2).join(','}
hoja.row(2)
hoja
exit
reg
exit
header.map{ |h| h.downcase.to_sym}
header.map(&:downcase)
header.map(&:downcase.to_sym)
header.map(&:to_sym)
header
Hash[[header, hoja.row(i)].transpose]
reg
exit
a
exit
a
exit
File.extname(file)
file
continue
Reporteador.new(precio_gasoil: 2).fertilizadoras['alfa']
continue
Reporteador.new(precio_gasoil: 2).fertilizadoras['alfa']
continue
Reporteador.new(precio_gasoil: 2).fertilizadoras['alfa']
continue
Mantenimiento.gastos_varios['beta']
continue
Mantenimiento.gastos_varios['beta']
exit
Reporteador.new().fertilizadoras['alfa']
continue
Reporteador.new(precio_gasoil: 2).fertilizadoras['alfa']
continue
Mantenimiento.gasoil(2)
continue
Mantenimiento.gasoil(2)
continue
Reporteador.fertilizadoras['alfa']
Labor.where(reporte:'fertilizadoras').sup
continue
Labor.where(reporte:'fertilizadoras').sup
Mantenimiento.where(reporte:'fertilizadoras').horas
Reporteador.fertilizadoras['alfa']
continue
Reporteador.fertilizadoras['alfa']
exit
Mantenimiento.all
exit
Mantenimiento.instance_methods(false).map { |i| i.to_s.gsub('=','')} + ['jo']
Mantenimiento.instance_methods(false).map { |i| i.to_s.gsub('=','')}
Mantenimiento.column_names
Mantenimiento.instance_methods(false).map { |i| i.to_s.gsub('=','').to_sym}
Mantenimiento.instance_methods(false).map { |i| i.to_s.gsub('=','')}
Mantenimiento.instance_methods(false).map { |i| i.to_s.gsub '=',''}
Mantenimiento.instance_methods(false).map(&:(to_s.gsub('=','')))
Mantenimiento.instance_methods(false).map(&:to_s.gsub('=',''))
Mantenimiento.instance_methods(false).map(&:to_s.gsub('=','')
Mantenimiento.instance_methods(false).map { |i| i.to_s.gsub '=',''}
Mantenimiento.instance_methods(false).map { |i| i.to_s.gsub '','='}
Mantenimiento.instance_methods(false).map { |i| i.gsub '','='}
Mantenimiento.instance_methods(false).map(&:gsub('','='))
Mantenimiento.instance_methods(false)
Mantenimiento.instance_methods
Mantenimiento.column_names
Mantenimiento.all
exit
Mantenimiento.all
Mantenimiento.first
continue
Mantenimiento.first
continue
Mantenimiento.first
exit
Mantenimiento.first
continue
Mantenimiento.all
continue
continu
Labor.sup['FERTILIZADORA STARA HERCULES 5.0 2013 PALMITAS - 326'][:superficie].to_f
Labor.sup['FERTILIZADORA STARA HERCULES 5.0 2013 PALMITAS - 326'][:superficie]
Labor.sup['FERTILIZADORA STARA HERCULES 5.0 2013 PALMITAS - 326'].superficie
Labor.sup['FERTILIZADORA STARA HERCULES 5.0 2013 PALMITAS - 326']
Labor.sup
exit
Labor.sup
exit
Reporteador.fertilizadoras
continue
Labor.where(reporte: 'fertilizadoras').sup
Labor.where(reporte: 'fertilizadorasaSs').sup
Labor.where(reporte: 'fertilizadoras').sup
Labor.sup
Labor.first
exit
Labor.sup.first[1].to_f
Labor.sup
continue
Labor.sup
Labor.sup.last
Labor.sup
Labor.supf
Labor.sup.last[1].to_f
Labor.sup.second[1].to_f
